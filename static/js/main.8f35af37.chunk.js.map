{"version":3,"sources":["index.js"],"names":["Square","props","setRoundnessvar","whichBlock","classes","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f35af37.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n  let setRoundnessvar = \"\"\r\n  if (props.whichBlock === 0) {\r\n    setRoundnessvar = 'rounded-tl-xl';\r\n  } else if (props.whichBlock === 2) {\r\n    setRoundnessvar = 'rounded-tr-xl';\r\n  } else if (props.whichBlock === 6) {\r\n    setRoundnessvar = 'rounded-bl-xl';\r\n  } else if (props.whichBlock === 8) {\r\n    setRoundnessvar = 'rounded-br-xl';\r\n  }\r\n  let classes = \"square h-40 w-40 bg-white m-2 text-7xl \" + setRoundnessvar;\r\n    return (\r\n      <button className={classes} onClick={props.onClick}>\r\n        {props.value}\r\n      </button>\r\n    );\r\n  }\r\n  \r\n  class Board extends React.Component {\r\n    renderSquare(i) {\r\n      return (\r\n        <Square\r\n          whichBlock={i}\r\n          value={this.props.squares[i]}\r\n          onClick={() => this.props.onClick(i)}\r\n        />\r\n      );\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div className=\"\">\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        history: [\r\n          {\r\n            squares: Array(9).fill(null)\r\n          }\r\n        ],\r\n        stepNumber: 0,\r\n        xIsNext: true\r\n      };\r\n    }\r\n  \r\n    handleClick(i) {\r\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice();\r\n      if (calculateWinner(squares) || squares[i]) {\r\n        return;\r\n      }\r\n      squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n      this.setState({\r\n        history: history.concat([\r\n          {\r\n            squares: squares\r\n          }\r\n        ]),\r\n        stepNumber: history.length,\r\n        xIsNext: !this.state.xIsNext\r\n      });\r\n    }\r\n  \r\n    jumpTo(step) {\r\n      this.setState({\r\n        stepNumber: step,\r\n        xIsNext: (step % 2) === 0\r\n      });\r\n    }\r\n  \r\n    render() {\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepNumber];\r\n      const winner = calculateWinner(current.squares);\r\n  \r\n      const moves = history.map((step, move) => {\r\n        const desc = move ?\r\n          'Go to move #' + move :\r\n          'Go to game start';\r\n        return (\r\n          <li className=\"mt-2 border-b-4 text-white p-2 font-semibold\" key={move}>\r\n            <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n          </li>\r\n        );\r\n      });\r\n  \r\n      let status;\r\n      if (winner) {\r\n        status = winner + \"  is the WINNER!!!!\";\r\n      } else {\r\n        status = (this.state.xIsNext ? \"X\" : \"O\") + \" will play next\";\r\n      }\r\n  \r\n      return (\r\n        <div>\r\n        <h1 className=\"font-bold flex justify-center text-white pt-10 text-7xl\"><div>Tic Tac Toe</div></h1>\r\n          <div className=\"game bg-black flex gap-20 justify-center py-32\">\r\n            <div className=\"game-board grid justify-center text-center gap-10\">\r\n              <div className=\"text-2xl font-semibold text-white\">{status}</div>\r\n              <Board\r\n                squares={current.squares}\r\n                onClick={i => this.handleClick(i)}\r\n              />\r\n            </div>\r\n            <div className=\"game-info text-white p-8 rounded-lg\">\r\n              <ol className=\"text-xl\">{moves}</ol>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n  \r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  "],"sourceRoot":""}